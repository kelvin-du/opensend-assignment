/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ClientImport } from './routes/_client'
import { Route as AdminImport } from './routes/_admin'
import { Route as IndexImport } from './routes/index'
import { Route as ClientOnboardingImport } from './routes/_client/onboarding'
import { Route as ClientDashboardImport } from './routes/_client/dashboard'
import { Route as AdminAdminImport } from './routes/_admin/admin'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ClientRoute = ClientImport.update({
  id: '/_client',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ClientOnboardingRoute = ClientOnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => ClientRoute,
} as any)

const ClientDashboardRoute = ClientDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ClientRoute,
} as any)

const AdminAdminRoute = AdminAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/_client': {
      id: '/_client'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ClientImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_admin/admin': {
      id: '/_admin/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminAdminImport
      parentRoute: typeof AdminImport
    }
    '/_client/dashboard': {
      id: '/_client/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ClientDashboardImport
      parentRoute: typeof ClientImport
    }
    '/_client/onboarding': {
      id: '/_client/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof ClientOnboardingImport
      parentRoute: typeof ClientImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminAdminRoute: typeof AdminAdminRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAdminRoute: AdminAdminRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface ClientRouteChildren {
  ClientDashboardRoute: typeof ClientDashboardRoute
  ClientOnboardingRoute: typeof ClientOnboardingRoute
}

const ClientRouteChildren: ClientRouteChildren = {
  ClientDashboardRoute: ClientDashboardRoute,
  ClientOnboardingRoute: ClientOnboardingRoute,
}

const ClientRouteWithChildren =
  ClientRoute._addFileChildren(ClientRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ClientRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof AdminAdminRoute
  '/dashboard': typeof ClientDashboardRoute
  '/onboarding': typeof ClientOnboardingRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ClientRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof AdminAdminRoute
  '/dashboard': typeof ClientDashboardRoute
  '/onboarding': typeof ClientOnboardingRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteWithChildren
  '/_client': typeof ClientRouteWithChildren
  '/login': typeof LoginRoute
  '/_admin/admin': typeof AdminAdminRoute
  '/_client/dashboard': typeof ClientDashboardRoute
  '/_client/onboarding': typeof ClientOnboardingRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/admin' | '/dashboard' | '/onboarding'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/admin' | '/dashboard' | '/onboarding'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_client'
    | '/login'
    | '/_admin/admin'
    | '/_client/dashboard'
    | '/_client/onboarding'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  ClientRoute: typeof ClientRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  ClientRoute: ClientRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/_client",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/admin"
      ]
    },
    "/_client": {
      "filePath": "_client.tsx",
      "children": [
        "/_client/dashboard",
        "/_client/onboarding"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_admin/admin": {
      "filePath": "_admin/admin.tsx",
      "parent": "/_admin"
    },
    "/_client/dashboard": {
      "filePath": "_client/dashboard.tsx",
      "parent": "/_client"
    },
    "/_client/onboarding": {
      "filePath": "_client/onboarding.tsx",
      "parent": "/_client"
    }
  }
}
ROUTE_MANIFEST_END */
